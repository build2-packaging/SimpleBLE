import impl_libs = fmt%lib{fmt}
import linux_intf_libs = libsimplebluez%lib{simplebluez}
intf_libs =

# Public headers.
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

is_windows = ($cxx.target.class == 'windows')
is_macos = ($cxx.target.class == 'macos')
is_linux = ($cxx.target.class == 'linux')

lib{simpleble}: $pub/{$pub_hdrs}
lib{simpleble}: {hxx cxx}{*}
lib{simpleble}: builders/{hxx cxx}{*}
lib{simpleble}: external/{hxx cxx}{*}
lib{simpleble}: $impl_libs $intf_libs

lib{simpleble}: linux/{hxx cxx}{*}: include = $is_linux
lib{simpleble}: $linux_intf_libs: include = $is_linux

lib{simpleble}: windows/{hxx cxx}{*}: include = $is_windows

lib{simpleble}: macos/{hxx cxx}{*}: include = $is_macos

define mm: file
mm{*}: extension = mm

objcxx_files = macos/*.mm
objcxx_files = $regex.apply($objcxx_files,'(.+)\.mm','\1')

[rule_hint=cxx] libul{simpleble-meta}: $intf_libs $impl_libs

for n: $objcxx_files
{
    obja{$(n).a.o}: mm{$n}
    objs{$(n).so.o}: mm{$n}
}

liba{simpleble}: obja{$regex.apply($objcxx_files,'(.+)','\1.a.o')}: include = $is_macos
libs{simpleble}: objs{$regex.apply($objcxx_files,'(.+)','\1.so.o')}: include = $is_macos

obja{~'/(.*).a/'}: mm{~'/\1/'} libua{simpleble-meta}
{{
    dep_poptions = $cxx.lib_poptions(libua{simpleble-meta}, obja)
    depdb hash $dep_poptions
    depdb dyndep "-I$out_root/src" "-I$src_root/src" \
                 "-I$out_root/include" "-I$src_root/include" \
                 --what=header --default-type=h \
                 --update-exclude libua{simpleble-meta} \
                 -- $cxx.path $cc.poptions $cxx.poptions $dep_poptions \
                    $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])
    diag obj-c++ ($<[0])
    $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
              $cc.coptions $cxx.coptions $cxx.mode        \
              -o $path($>) -c -x objective-c++ $path($<[0])
}}
objs{~'/(.*).so/'}: mm{~'/\1/'} libus{simpleble-meta}
{{
    dep_poptions = $cxx.lib_poptions(libus{simpleble-meta}, objs)
    depdb hash $dep_poptions
    depdb dyndep "-I$out_root/src" "-I$src_root/src" \
                 "-I$out_root/include" "-I$src_root/include" \
                 --what=header --default-type=h \
                 --update-exclude libus{simpleble-meta} \
                 -- $cxx.path $cc.poptions $cxx.poptions $dep_poptions \
                    $cc.coptions $cxx.coptions $cxx.mode -M -MG $path($<[0])
    diag obj-c++ ($<[0])
    $cxx.path $cc.poptions $cxx.poptions $dep_poptions    \
              $cc.coptions $cxx.coptions $cxx.mode        \
              -o $path($>) -c -x objective-c++ $path($<[0])
}}

platform_libs = # Platform specific libraries.
platform_poptions = # Platform specific poptions.
platform_coptions = # Platform specific coptions.
src_inc_dirs = builders/ external/
switch $cxx.target.class
{
    case 'windows'
    {
        src_inc_dirs += windows/
        if ($cxx.target.system != 'mingw32')
        {
            platform_poptions += -D_WIN32_WINNT=0x0A00 -D_USE_MATH_DEFINES
        }

        if($cxx.id == 'msvc')
        {
            platform_coptions += /Gd /WX /W1
        }
    }
    case 'linux'
    {
        src_inc_dirs += linux/
        intf_libs += $linux_intf_libs
    }
    case 'macos'
    {
        src_inc_dirs += macos/
        platform_coptions += -fobjc-arc
        platform_libs += -framework Foundation -framework CoreBluetooth
    }
    default
    {
        fail "Unsupported platform '$cxx.target.class"
    }
}

# Build options.
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

for d: $src_inc_dirs
{
    cxx.poptions +=  "-I$out_pfx_src/$d" "-I$src_pfx_src/$d"
}

cxx.coptions += $platform_coptions
cxx.poptions += "-I$out_pfx_src" "-I$src_pfx_src" \
                "-I$out_pfx_inc" "-I$src_pfx_inc" \
                "-DSIMPLEBLE_EXPORTS" \
                $platform_poptions
cxx.libs += $platform_libs

{hbmia obja}{*}: cxx.poptions += -DSIMPLEBLE_STATIC

# Export options.
lib{simpleble}:
{
  cxx.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
  cxx.export.libs = $intf_libs
}

liba{simpleble}: cxx.export.poptions += -DSIMPLEBLE_STATIC

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
if $version.pre_release
  lib{simpleble}: bin.lib.version = "-$version.project_id"
else
  lib{simpleble}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
{hxx ixx}{*}: install = false
