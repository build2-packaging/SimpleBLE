import impl_libs = fmt%lib{fmt}
cxx.poptions += -Dsimpleble_EXPORTS

# Public headers.
pub = [dir_path] ../include/

include $pub

pub_hdrs = $($pub/ pub_hdrs)

is_windows = ($cxx.target.class == 'windows')
is_macos = ($cxx.target.class == 'macos')
is_linux = ($cxx.target.class == 'linux')

lib{simpleble}: $pub/{$pub_hdrs}
lib{simpleble}: simpleble/{hxx cxx}{*}
lib{simpleble}: simpleble/builders/{hxx cxx}{**}
lib{simpleble}: simpleble/external/{hxx cxx}{**}

lib{simpleble}: simpleble/linux/{hxx cxx}{**}: include = $is_linux
lib{simpleble}: simplebluez/{hxx cxx}{**}: include = $is_linux
lib{simpleble}: simpledbus/{hxx cxx}{**}: include = $is_linux

lib{simpleble}: simpleble/windows/{hxx cxx}{**}: include = $is_windows

lib{simpleble}: $impl_libs

platform_libs = # Platform specific libraries.
platform_poptions = # Platform specific poptions.
switch $cxx.target.class
{
    case 'windows'
    {
        if ($cxx.target.system != 'mingw32')
		{
            platform_poptions += "/D_USE_MATH_DEFINES" "/D_WIN32_WINNT=0x0A00" "/Gd"
		}
    }
    case 'linux'
    {
		# TODO can we get these paths from pkgconfig?
        platform_poptions += "-I/usr/include/dbus-1.0" "-I/usr/lib/x86_64-linux-gnu/dbus-1.0/include"
		platform_poptions += "-DSIMPLEDBUS_LOG_LEVEL=$config.libsimpleble.dbus_log_level" "-DSIMPLEBLUEZ_LOG_LEVEL=$config.libsimpleble.bluez_log_level"
        platform_libs = -pthread -ldbus-1
    }
}

src_dirs = {**/}

# Build options.
out_pfx_inc = [dir_path] $out_root/include/
src_pfx_inc = [dir_path] $src_root/include/
out_pfx_src = [dir_path] $out_root/src/
src_pfx_src = [dir_path] $src_root/src/

for d: $src_dirs
{
    cxx.poptions +=  "-I$out_pfx_src/$d" "-I$src_pfx_src/$d"
}

cxx.poptions += "-I$out_pfx_src" "-I$src_pfx_src" \
                "-I$out_pfx_inc" "-I$src_pfx_inc" \
                $platform_poptions
cxx.libs += $platform_libs

{hbmia obja}{*}: cxx.poptions += -DSIMPLEBLE_STATIC_DEFINE

# Export options.
lib{simpleble}:
{
  cxx.export.poptions = "-I$out_pfx_inc" "-I$src_pfx_inc"
}

liba{sfml-system}: cxx.export.poptions += -DSIMPLEBLE_STATIC_DEFINE

# For pre-releases use the complete version to make sure they cannot be used
# in place of another pre-release or the final version. See the version module
# for details on the version.* variable values.
if $version.pre_release
  lib{simpleble}: bin.lib.version = "-$version.project_id"
else
  lib{simpleble}: bin.lib.version = "-$version.major.$version.minor"

# Don't install private headers.
{hxx ixx}{*}: install = false
